version: '3'
services:
  demo-service:
    build: ./demo/
    container_name: demo-service
    ports:
      - "8080:8080"
    networks:
      - demo-backend-network
    depends_on:
      - postgres-demo-db

  postgres-demo-db:
    image: postgres:12.3-alpine
    container_name: demo-db
    environment:
      - POSTGRES_PASSWORD=demo123
      - POSTGRES_DB=demo
    ports:
      # don't expose ports in production
      - "8081:5432"
    networks:
      - demo-backend-network
    volumes:
      - ./initDb.sql:/docker-entrypoint-initdb.d/init.sql
      - ./initOutboxSettings.sh:/docker-entrypoint-initdb.d/init.sh

  zookeeper:
    image: 'bitnami/zookeeper:latest'
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - '2181:2181'
    environment:
      - ZOO_SERVER_ID=1
      - ZOO_PORT_NUMBER=2181
      - ZOO_SERVERS=server.1=zookeeper:2888:3888
      - ZOO_4LW_COMMANDS_WHITELIST=dump, srvr, mntr
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - demo-backend-network

  kafka1:
    image: 'bitnami/kafka:latest'
    hostname: kafka1
    container_name: kafka1
    ports:
      - '9092:9092'
    environment:
      - KAFKA_CFG_ADVERTISED_LISTENERS=INTERNAL://kafka1:19092,EXTERNAL://kafka1:9092
      - KAFKA_CFG_LISTENERS=INTERNAL://kafka1:19092,EXTERNAL://kafka1:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=INTERNAL
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_BROKER_ID=1
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_TOPIC
    depends_on:
      - zookeeper
    networks:
      - demo-backend-network

  demo-connect:
    build: ./DebeziumTransformer/
    container_name: demo-connect
    hostname: demo-connect
    ports:
      - '8083:8083'
    environment:
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: demo_connect_config
      OFFSET_STORAGE_TOPIC: demo_connect_offsets
      STATUS_STORAGE_TOPIC: demo_connect_status
      BOOTSTRAP_SERVERS: kafka1:9092
      ZOOKEEPER_CONNECTION: zookeeper:2181
    networks:
      - demo-backend-network
    depends_on:
      - kafka1
      - postgres-demo-db

  kafka-setup:
    image: confluentinc/cp-kafka
    hostname: kafka-setup
    container_name: kafka-setup
    command: "bash -c 'echo Waiting for Kafka to be ready... && \
                          cub kafka-ready -b kafka1:9092 1 20 && \
                          kafka-topics --create --if-not-exists --zookeeper zookeeper:2181 --partitions 3 --replication-factor 1 --topic person && \
                          echo Waiting 60 seconds for Connect to be ready... && \
                          sleep 60 && \
                          curl -i -X POST -H Accept:application/json -H Content-Type:application/json http://demo-connect:8083/connectors/ -d @/opt/docker/connectors/connector_demo.json'"
    environment:
      # The following settings are listed here only to satisfy the image's requirements.
      # We override the image's `command` anyways, hence this container will not start a broker.
      KAFKA_BROKER_ID: ignored
      KAFKA_ZOOKEEPER_CONNECT: ignored
    volumes:
      - ./DebeziumTransformer/connector_demo.json:/opt/docker/connectors/connector_demo.json
    depends_on:
      - kafka1
    networks:
      - demo-backend-network

  demo-consumer:
    build: ./democonsumer/
    container_name: demo-consumer
    ports:
      - "8050:8050"
    networks:
      - demo-backend-network
    depends_on:
      - demo-connect

networks:
  demo-backend-network:
    driver: bridge
